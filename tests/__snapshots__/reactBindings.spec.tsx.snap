// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react file (snapshot) 1`] = `
"/* eslint-disable */
/* tslint:disable */
import React from 'react';

export type ILocaleKeys = {
    common: {
      loggedIn: {
        /* common.loggedIn.message */
        /* Hey, {{username}}, you have successfully logged in! */
        message: (data: Record<'username', unknown>) => string; 
      }; 
    }; 
    /* readingWarning */
    /* {{reader}} reads message from {{writer}} */
    readingWarning: (data: Record<'reader' | 'writer', unknown>) => string; 
  };
const createProxyImpl = <R extends string>(
  t = (...[k]: unknown[]) => k as R,
  prevKeys = ''
): unknown =>
  new Proxy((...args: unknown[]) => t(prevKeys, ...args), {
    get: (_, key: string): unknown => {
      let nextKey = prevKeys;

      if (key !== '$value') {
        nextKey = prevKeys ? [prevKeys, key].join('.') : key;
      }

      return createProxyImpl(t, nextKey);
    },
  });

export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return createProxyImpl(t) as ILocaleKeys;
}

const LocaleKeysContext = React.createContext({} as ILocaleKeys);
export const LocaleKeysProvider: React.FC<{ translateFn?: (...args: unknown[]) => string; localeKeys?: ILocaleKeys; children?: React.ReactNode }> = ({ translateFn, localeKeys, children }) => {
    if (!translateFn && !localeKeys) { throw new Error('Either translateFn or localeKeys must be provided') }
    const value = (typeof translateFn === 'function' ? LocaleKeys(translateFn) : localeKeys) as ILocaleKeys
    return <LocaleKeysContext.Provider value={value}>{children}</LocaleKeysContext.Provider>;
  };
export const useLocaleKeys = () => React.useContext(LocaleKeysContext);
"
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`complex interpolation case general case 1`] = `
"/* eslint-disable */
/* tslint:disable */
export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return {
    order: {
      shippingLabel: {
        customerDetailsCard: {
          address: (data: Record<'firstName' | 'lastName' | 'addressLine1' | 'addressLine2' | 'city' | 'state' | 'zipCode' | 'country', unknown>) => t('order.shippingLabel.customerDetailsCard.address', data), /* {{firstName}} {{lastName}}, {{addressLine1, suffix ', '}}{{addressLine2, suffix ', '}}{{city, concat ', '}}{{state, suffix ' '}}{{zipCode, suffix ', '}}{{country}} */
        },
        labelDetailsCard: {
          shipFrom: {
            addressFormat: (data: Record<'addressLine1' | 'addressLine2' | 'city' | 'state' | 'zipCode' | 'country', unknown>) => t('order.shippingLabel.labelDetailsCard.shipFrom.addressFormat', data), /* {{addressLine1, suffix ', '}}{{addressLine2, suffix ', '}}{{city, suffix ', '}}{{state}} {{zipCode, suffix ', '}}{{country}} */
          },
        },
      },
    },
  };
}

export type ILocaleKeys = ReturnType<typeof LocaleKeys>;
"
`;

exports[`data interpolation icu 1`] = `
"/* eslint-disable */
/* tslint:disable */
export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return {
    common: {
      people: {
        message: (data: Record<'numPersons', unknown>) => t('common.people.message', data), /* Hey, {numPersons, plural, =0 {no one} =1 {one person} other {# persons}} */
        messageComplex: (data: Record<'name' | 'numPersons' | 'productsAmount', unknown>) => t('common.people.messageComplex', data), /* Hey {name}, There are {numPersons, plural, =0 {no one} =1 {one person} other {# persons}} that want to change the {productsAmount, plural, =1 {price of 1 product} other {prices of # products}} */
      },
    },
  };
}

export type ILocaleKeys = ReturnType<typeof LocaleKeys>;
"
`;

exports[`data interpolation icu with double brackets 1`] = `
"/* eslint-disable */
/* tslint:disable */
export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return {
    common: {
      people: {
        message: () => t('common.people.message'), /* Hey, {numPersons, plural, =0 {no one} =1 {one person} other {# persons}} */
        messageComplex: () => t('common.people.messageComplex'), /* Hey {name}, There are {numPersons, plural, =0 {no one} =1 {one person} other {# persons}} that want to change the {productsAmount, plural, =1 {price of 1 product} other {prices of # products}} */
      },
    },
  };
}

export type ILocaleKeys = ReturnType<typeof LocaleKeys>;
"
`;

exports[`data interpolation single quote 1`] = `
"/* eslint-disable */
/* tslint:disable */
export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return {
    common: {
      loggedIn: {
        message: (data: Record<'username', unknown>) => t('common.loggedIn.message', data), /* Hey, {username}, you have successfully logged in! */
      },
    },
    readingWarning: (data: Record<'reader' | 'writer', unknown>) => t('readingWarning', data), /* {reader} reads message from {writer} */
  };
}

export type ILocaleKeys = ReturnType<typeof LocaleKeys>;
"
`;

exports[`flat data 1`] = `
"/* eslint-disable */
/* tslint:disable */
export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return {
    common: {
      cancel: () => t('common.cancel'), /* Cancel */
    },
    model: {
      player: {
        name: () => t('model.player.name'), /* Name */
      },
    },
  };
}

export type ILocaleKeys = ReturnType<typeof LocaleKeys>;
"
`;

exports[`nested data 1`] = `
"/* eslint-disable */
/* tslint:disable */
export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return {
    common: {
      create: () => t('common.create'), /* Create */
    },
    model: {
      user: {
        id: () => t('model.user.id'), /* ID */
      },
    },
  };
}

export type ILocaleKeys = ReturnType<typeof LocaleKeys>;
"
`;

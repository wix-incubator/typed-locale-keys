// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator complex interpolation case snapshot 1`] = `
"/* eslint-disable */
/* tslint:disable */
export type ILocaleKeys = {
    order: {
      shippingLabel: {
        customerDetailsCard: {
          /* order.shippingLabel.customerDetailsCard.address */
          /* {{firstName}} {{lastName}}, {{addressLine1, suffix ', '}}{{addressLine2, suffix ', '}}{{city, concat ', '}}{{state, suffix ' '}}{{zipCode, suffix ', '}}{{country}} */
          address: (data: Record<'firstName' | 'lastName' | 'addressLine1' | 'addressLine2' | 'city' | 'state' | 'zipCode' | 'country', unknown>) => string; 
        }; 
        labelDetailsCard: {
          shipFrom: {
            /* order.shippingLabel.labelDetailsCard.shipFrom.addressFormat */
            /* {{addressLine1, suffix ', '}}{{addressLine2, suffix ', '}}{{city, suffix ', '}}{{state}} {{zipCode, suffix ', '}}{{country}} */
            addressFormat: (data: Record<'addressLine1' | 'addressLine2' | 'city' | 'state' | 'zipCode' | 'country', unknown>) => string; 
          }; 
        }; 
      }; 
    }; 
  };
const createProxyImpl = <R extends string>(
  t = (...[k]: unknown[]) => k as R,
  prevKeys = ''
): unknown =>
  new Proxy((...args: unknown[]) => t(prevKeys, ...args), {
    get: (_, key: string): unknown => {
      let nextKey = prevKeys;

      if (key !== '$value') {
        nextKey = prevKeys ? [prevKeys, key].join('.') : key;
      }

      return createProxyImpl(t, nextKey);
    },
  });

export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return createProxyImpl(t) as ILocaleKeys;
}
"
`;

exports[`generator data interpolation icu snapshot 1`] = `
"/* eslint-disable */
/* tslint:disable */
export type ILocaleKeys = {
    common: {
      people: {
        /* common.people.message */
        /* Hey, {numPersons, plural, =0 {no one} =1 {one person} other {# persons}} */
        message: (data: Record<'numPersons', unknown>) => string; 
        /* common.people.messageComplex */
        /* Hey {name}, There are {numPersons, plural, =0 {no one} =1 {one person} other {# persons}} that want to change the {productsAmount, plural, =1 {price of 1 product} other {prices of # products}} */
        messageComplex: (data: Record<'name' | 'numPersons' | 'productsAmount', unknown>) => string; 
        /* common.people.pluralMessage */
        /* {numPeople, plural, =0 {No one is} =1 {One person is} other {# people are}} interested */
        pluralMessage: (data: Record<'numPeople', unknown>) => string; 
        /* common.people.ordinalMessage */
        /* {position, selectordinal, one {You're 1st} two {You're 2nd} few {You're 3rd} other {You're #th}} */
        ordinalMessage: (data: Record<'position', unknown>) => string; 
        /* common.people.dateMessage */
        /* Today is {currentDate, date, long} */
        dateMessage: (data: Record<'currentDate', unknown>) => string; 
        /* common.people.timeMessage */
        /* The current time is {currentTime, time, short} */
        timeMessage: (data: Record<'currentTime', unknown>) => string; 
        /* common.people.selectMessage */
        /* {gender, select, male {He is} female {She is} other {They are} } interested */
        selectMessage: (data: Record<'gender', unknown>) => string; 
        /* common.people.numberMessage */
        /* You have {numApples, number} apples */
        numberMessage: (data: Record<'numApples', unknown>) => string; 
      }; 
    }; 
  };
const createProxyImpl = <R extends string>(
  t = (...[k]: unknown[]) => k as R,
  prevKeys = ''
): unknown =>
  new Proxy((...args: unknown[]) => t(prevKeys, ...args), {
    get: (_, key: string): unknown => {
      let nextKey = prevKeys;

      if (key !== '$value') {
        nextKey = prevKeys ? [prevKeys, key].join('.') : key;
      }

      return createProxyImpl(t, nextKey);
    },
  });

export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return createProxyImpl(t) as ILocaleKeys;
}
"
`;

exports[`generator data interpolation icu with nested params snapshot 1`] = `
"/* eslint-disable */
/* tslint:disable */
export type ILocaleKeys = {
    common: {
      people: {
        /* common.people.message */
        /* Hey, {numPersons, plural, =0 {no one} =1 {one person} other {# persons}} */
        message: (data: Record<'numPersons', unknown>) => string; 
        /* common.people.messageNestedParams */
        /* Hey, {numPersons, plural, =0 {No one here.} one {{name}. You are the only person here.} other {{name} and # other persons are here.}} */
        messageNestedParams: (data: Record<'name' | 'numPersons', unknown>) => string; 
      }; 
    }; 
  };
const createProxyImpl = <R extends string>(
  t = (...[k]: unknown[]) => k as R,
  prevKeys = ''
): unknown =>
  new Proxy((...args: unknown[]) => t(prevKeys, ...args), {
    get: (_, key: string): unknown => {
      let nextKey = prevKeys;

      if (key !== '$value') {
        nextKey = prevKeys ? [prevKeys, key].join('.') : key;
      }

      return createProxyImpl(t, nextKey);
    },
  });

export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return createProxyImpl(t) as ILocaleKeys;
}
"
`;

exports[`generator data interpolation single quote snapshot 1`] = `
"/* eslint-disable */
/* tslint:disable */
export type ILocaleKeys = {
    common: {
      loggedIn: {
        /* common.loggedIn.message */
        /* Hey, {username}, you have successfully logged in! */
        message: (data: Record<'username', unknown>) => string; 
      }; 
    }; 
    /* readingWarning */
    /* {reader} reads message from {writer} */
    readingWarning: (data: Record<'reader' | 'writer', unknown>) => string; 
  };
const createProxyImpl = <R extends string>(
  t = (...[k]: unknown[]) => k as R,
  prevKeys = ''
): unknown =>
  new Proxy((...args: unknown[]) => t(prevKeys, ...args), {
    get: (_, key: string): unknown => {
      let nextKey = prevKeys;

      if (key !== '$value') {
        nextKey = prevKeys ? [prevKeys, key].join('.') : key;
      }

      return createProxyImpl(t, nextKey);
    },
  });

export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return createProxyImpl(t) as ILocaleKeys;
}
"
`;

exports[`generator flat data snapshot 1`] = `
"/* eslint-disable */
/* tslint:disable */
export type ILocaleKeys = {
    common: {
      /* common.cancel */
      /* Cancel */
      cancel: () => string; 
    }; 
    model: {
      player: {
        /* model.player.name */
        /* Name */
        name: () => string; 
      }; 
    }; 
  };
const createProxyImpl = <R extends string>(
  t = (...[k]: unknown[]) => k as R,
  prevKeys = ''
): unknown =>
  new Proxy((...args: unknown[]) => t(prevKeys, ...args), {
    get: (_, key: string): unknown => {
      let nextKey = prevKeys;

      if (key !== '$value') {
        nextKey = prevKeys ? [prevKeys, key].join('.') : key;
      }

      return createProxyImpl(t, nextKey);
    },
  });

export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return createProxyImpl(t) as ILocaleKeys;
}
"
`;

exports[`generator nested data snapshot 1`] = `
"/* eslint-disable */
/* tslint:disable */
export type ILocaleKeys = {
    common: {
      /* common.create */
      /* Create */
      create: () => string; 
    }; 
    model: {
      user: {
        /* model.user.id */
        /* ID */
        id: () => string; 
      }; 
    }; 
  };
const createProxyImpl = <R extends string>(
  t = (...[k]: unknown[]) => k as R,
  prevKeys = ''
): unknown =>
  new Proxy((...args: unknown[]) => t(prevKeys, ...args), {
    get: (_, key: string): unknown => {
      let nextKey = prevKeys;

      if (key !== '$value') {
        nextKey = prevKeys ? [prevKeys, key].join('.') : key;
      }

      return createProxyImpl(t, nextKey);
    },
  });

export function LocaleKeys<R extends string>(t: (...args: unknown[]) => R) {
  return createProxyImpl(t) as ILocaleKeys;
}
"
`;
